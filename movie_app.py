import streamlit as st
import pickle
import os
import requests

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Google Drive
def download_file_from_google_drive(file_id, destination):
    st.info("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•... (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 1-2 ‡∏ô‡∏≤‡∏ó‡∏µ)")
    
    URL = "https://drive.google.com/uc?export=download&confirm=1"
    session = requests.Session()
    response = session.get(URL, params={'id': file_id}, stream=True)
    
    # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô chunks
    with open(destination, "wb") as f:
        for chunk in response.iter_content(chunk_size=32768):
            if chunk:
                f.write(chunk)
    
    st.success("‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ import function
try:
    from myfunction_66130701931 import get_movie_recommendations
except ImportError as e:
    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ: {e}")
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå 'myfunction_66130701931.py' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô")
    st.stop()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
@st.cache_data
def load_data():
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if not os.path.exists('recommendation_data.pkl'):
            # Google Drive File ID ‡∏à‡∏≤‡∏Å link ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            file_id = "1VBosaUXem8RmOIJPQlb09vXhv_H8fYMV"
            download_file_from_google_drive(file_id, 'recommendation_data.pkl')
        
        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        with open('recommendation_data.pkl', 'rb') as file:
            user_similarity_df, user_movie_ratings = pickle.load(file)
        return user_similarity_df, user_movie_ratings
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        st.stop()

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
user_similarity_df, user_movie_ratings = load_data()

# Streamlit App
st.title("üé¨ Movie Recommendation System")

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User IDs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
available_users = user_movie_ratings.index.tolist()
min_user_id = int(min(available_users))
max_user_id = int(max(available_users))

st.info(f"üìä User ID ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: {min_user_id} - {max_user_id}")

user_id = st.number_input(
    "Enter User ID:",
    min_value=min_user_id,
    max_value=max_user_id,
    value=min_user_id,
    step=1
)

if st.button("Get Recommendations"):
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ID ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        if user_id not in available_users:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö User ID {user_id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            st.info(f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å User ID ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á {min_user_id} - {max_user_id}")
        else:
            with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥...'):
                recommendations = get_movie_recommendations(
                    user_id,
                    user_similarity_df,
                    user_movie_ratings,
                    10
                )
            
            if recommendations is not None and len(recommendations) > 0:
                st.success(f"‚úÖ ‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User {user_id}")
                st.subheader(f"üé¨ Top 10 movie recommendations for User {user_id}:")
                for idx, movie_title in enumerate(recommendations, 1):
                    st.write(f"{idx}. {movie_title}")
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ‡∏ô‡∏µ‡πâ")
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö function get_movie_recommendations")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
with st.expander("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö"):
    st.write(f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(available_users)}")
    st.write(f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {user_movie_ratings.shape[1]}")
    st.write(f"- ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö User Similarity: {user_similarity_df.shape}")
